// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package rest

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code The resulting http code
	Code    int         `json:"code"`
	Details interface{} `json:"details"`

	// Message Description of the error occurred
	Message string `json:"message"`
}

// PageMetadata defines model for PageMetadata.
type PageMetadata struct {
	// Page The returned page
	Page int `json:"page"`

	// Size The size of the page
	Size int `json:"size"`

	// TotalCount The total number of items
	TotalCount int `json:"totalCount"`

	// TotalPages The total number of pages
	TotalPages int `json:"totalPages"`
}

// PagePostComments defines model for PagePostComments.
type PagePostComments struct {
	UnderscoreMetadata PageMetadata  `json:"_metadata"`
	Data               []PostComment `json:"data"`
}

// PostComment defines model for PostComment.
type PostComment struct {
	// Comment The comment value
	Comment string `json:"comment"`

	// CreatedAt Creating time of the comment
	CreatedAt time.Time `json:"createdAt"`

	// Id Id of the comment
	Id int `json:"id"`

	// PostId Id of the post
	PostId int `json:"postId"`

	// PostedAt Posting time of the comment
	PostedAt time.Time `json:"postedAt"`

	// UpdatedAt Updating time of the comment
	UpdatedAt time.Time `json:"updatedAt"`

	// UserId Id of the user who wrote the comment
	UserId int `json:"userId"`
}

// PostCommentNew defines model for PostCommentNew.
type PostCommentNew struct {
	// Comment The comment value
	Comment string `json:"comment"`

	// PostID Id of the post
	PostID uint `json:"postId"`

	// UserID Id of the user who wrote the comment
	UserID uint `json:"userId"`
}

// User defines model for User.
type User struct {
	// CreatedAt Creating time of the user
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id Id of the user
	Id *int `json:"id,omitempty"`

	// IsAdmin Whether the user is admin or not
	IsAdmin *bool `json:"isAdmin,omitempty"`

	// Password Password of the user
	Password string `json:"password"`

	// UpdatedAt Updating time of the user
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Username Username of the user
	Username string `json:"username"`
}

// GetPostCommentsParams defines parameters for GetPostComments.
type GetPostCommentsParams struct {
	// Page Page to retrieve
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Size of the page
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// UserLoginJSONRequestBody defines body for UserLogin for application/json ContentType.
type UserLoginJSONRequestBody = User

// UserSignupJSONRequestBody defines body for UserSignup for application/json ContentType.
type UserSignupJSONRequestBody = User

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get comments page
	// (GET /api/posts/{postId}/comments)
	GetPostComments(c *gin.Context, postID uint, params GetPostCommentsParams)
	// post comment
	// (POST /api/posts/{postId}/comments)
	PostAPostComment(c *gin.Context, postID uint)
	// Login
	// (POST /api/users/login)
	UserLogin(c *gin.Context)
	// Signup
	// (POST /api/users/signup)
	UserSignup(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetPostComments operation middleware
func (siw *ServerInterfaceWrapper) GetPostComments(c *gin.Context) {

	var err error

	// ------------- Path parameter "postId" -------------
	var postID uint

	err = runtime.BindStyledParameterWithOptions("simple", "postId", c.Param("postId"), &postID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter postId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostCommentsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostComments(c, postID, params)
}

// PostAPostComment operation middleware
func (siw *ServerInterfaceWrapper) PostAPostComment(c *gin.Context) {

	var err error

	// ------------- Path parameter "postId" -------------
	var postID uint

	err = runtime.BindStyledParameterWithOptions("simple", "postId", c.Param("postId"), &postID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter postId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAPostComment(c, postID)
}

// UserLogin operation middleware
func (siw *ServerInterfaceWrapper) UserLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserLogin(c)
}

// UserSignup operation middleware
func (siw *ServerInterfaceWrapper) UserSignup(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserSignup(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/posts/:postId/comments", wrapper.GetPostComments)
	router.POST(options.BaseURL+"/api/posts/:postId/comments", wrapper.PostAPostComment)
	router.POST(options.BaseURL+"/api/users/login", wrapper.UserLogin)
	router.POST(options.BaseURL+"/api/users/signup", wrapper.UserSignup)
}
