// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package rest

import (
	"time"

	"github.com/gin-gonic/gin"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code The resulting http code
	Code    int         `json:"code"`
	Details interface{} `json:"details"`

	// Message Description of the error occurred
	Message string `json:"message"`
}

// User defines model for User.
type User struct {
	// CreatedAt Creating time of the user
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id Id of the user
	Id *int `json:"id,omitempty"`

	// IsAdmin Whether the user is admin or not
	IsAdmin *bool `json:"isAdmin,omitempty"`

	// Password Password of the user
	Password string `json:"password"`

	// UpdatedAt Updating time of the user
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Username Username of the user
	Username string `json:"username"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Signup
	// (POST /api/users/signup)
	UserSignup(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// UserSignup operation middleware
func (siw *ServerInterfaceWrapper) UserSignup(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserSignup(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/users/signup", wrapper.UserSignup)
}
